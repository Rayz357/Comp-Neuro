#Tutorial 1: Decoding Neural Responses
In this tutorial, we’ll use deep learning to decode stimulus information from the responses of sensory neurons. Specifically, we’ll look at the activity of ~20,000 neurons in the mouse primary visual cortex responding to oriented gratings recorded in this study. Our task will be to decode the orientation of the presented stimulus from the responses of the whole population of neurons.

# Tutorial 2: 2D CNN
  2D卷积（2维卷积）是一种在图像处理和计算机视觉中常用的操作，也是许多深度学习模型的基本构建块。在2D卷积中，使用一个叫做卷积核（或过滤器）的小型矩阵在输入图像或矩阵上滑动。在每一步，卷积核与覆盖的输入区域对应元素相乘，然后将结果求和以产生输出矩阵的一个元素。随后，卷积核向右或向下移动一定的步长（通常为1），然后重复这个过程。  
卷积操作: 卷积层使用一个固定大小的滤波器或内核，这个滤波器在输入图像上滑动，计算其与每个可能的局部区域的加权和。由于滤波器的权重在整个图像上保持不变，因此卷积层中的所有神经元共享相同的权重。
### 使用pytorch搭建CNN
#### 参数   
Cin: 输入通道的数量。这表示输入图像的深度，对于灰度图像，通常为1，对于彩色图像（例如RGB图像），通常为3。  
Cout: 输出通道的数量，也就是卷积滤波器的数量。每个滤波器都会学习检测输入图像的不同特征，因此Cout定义了卷积层将学习的特征数量。  
K: 卷积滤波器的大小。它定义了滤波器的宽度和高度，通常是奇数，如3, 5, 7等，以便在滤波器中心有一个定义的像素。  
#### 输入形状
输入必须是一个4D张量，形状为(N, Cin, Hin, Win)，其中：  
N: 图像的数量（批量大小）。  
Cin: 输入通道数量（例如，灰度图像为1，彩色图像为3）。  
Hin, Win: 图像的高度和宽度。  
#### 使用 nn.Conv2d()
PyTorch提供了一个方便的类nn.Conv2d()来执行2D卷积操作。只需传入上述参数，即可创建卷积层.例如，要创建一个输入通道为1，输出通道为16，滤波器大小为3的卷积层，可以这样做：  
```python
conv_layer = nn.Conv2d(Cin=1, Cout=16, K=3)
```
输出通道的数量是指卷积层中卷积滤波器的数量。每个滤波器在卷积过程中与输入进行卷积，产生一个新的特征图或激活图。因此，输出通道的数量也对应于产生的特征图的数量。
- 滤波器的作用：每个卷积滤波器通常设计为从输入图像中检测一种特定类型的特征，例如边缘、纹理或其他某种模式。因此，输出通道的数量定义了网络在该层级能够检测的不同特征类型的数量。
- 特征图：每个滤波器与输入图像进行卷积，产生一个特征图，这个特征图强调了输入中与该滤波器对应的特定特征。
- 多通道输出：如果一个卷积层有多个滤波器（即多个输出通道），则每个通道产生一个特征图。整个卷积层的输出是这些特征图的堆叠，形成一个多通道的输出。
例如，如果一个卷积层有32个输出通道，那么它将有32个不同的卷积滤波器，每个滤波器与输入图像进行卷积，产生32个特征图。这些特征图共同形成了该卷积层的输出，捕获了输入图像中的多个不同方面的信息。


==回答Section2最后的几个问题==

# Tutorial 3: Building and Evaluating Normative Encoding Models
