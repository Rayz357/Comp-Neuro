## Section 1.1: Load retinal ganglion cell activity data
在这个练习中，我们使用来自实验的数据。该实验使用一个屏幕，该屏幕在两个亮度值之间随机交替，并记录了视网膜神经节细胞（RGC）的反应，RGC是眼睛后部视网膜中的一种神经元。这种视觉刺激被称为“全场闪烁”(“full-field flicker)，它以120Hz的频率呈现(~8ms)。该time bin用于计算每个神经元发出的spikes数量。  
RGCdata.mat文档包含三个变量：
- 刺激Stim :每个时间点的刺激强度。它是一个形状为 T×1 的数组(T=144051) 
- SpCounts，2 个 ON 细胞和 2 个 OFF 细胞的在每个time bin的发出的尖峰数（binned spike counts)。它是一个 144051×4 数组，每列代表不同细胞的spike counts
- dtStim，单个time bin的大小（以秒为单位），以峰值/秒为单位计算模型输出。尖峰帧速率(stimulus frame rate) = 1 / dtStim 
```python
data = loadmat('RGCdata.mat')  # loadmat is a function in scipy.io
dt_stim = data['dtStim'].item()  # .item extracts a scalar value

# Extract the stimulus intensity
stim = data['Stim'].squeeze()  # .squeeze removes dimensions with 1 element 移除长度为1的维度，如(N,1)->(N,)

# Extract the spike counts for one cell
cellnum = 2
spikes = data['SpCounts'][:, cellnum]

# Don't use all of the timepoints in the dataset, for speed
keep_timepoints = 20000
stim = stim[:keep_timepoints]
spikes = spikes[:keep_timepoints]
#Use the plot_stim_and_spikes helper function to visualize the changes in stimulus intensities and spike counts over time.
plot_stim_and_spikes(stim, spikes, dt_stim)
```
### Coding Exercise 1.1: Create design matrix
我们的目标是根据细胞之前的刺激强度来预测细胞的活动。这将帮助我们了解 RGC 如何随着时间的推移处理信息。为此，我们首先需要为此模型创建设计矩阵，该矩阵以矩阵形式组织刺激强度，使得第 i 行具有时间点 i 之前的刺激帧（细胞接受的刺激数量）。在本练习中，我们将使用 d=25 时间滞后(time bin?)创建设计矩阵 X。也就是说，X应该是T×d矩阵。 X是有T个细胞在d=25个时间滞后中产生的刺激d=25（约 200 ms）是我们根据影响 RGC 响应的时间窗口的先验知识做出的选择。  
行 t 中的最后一个元素应对应于在时间 t 产生的刺激，其左侧的元素应包含前一次time bin输入的stim值，等等。  
具体来说，Xij 将是时间 i+d-1-j 时的刺激强度 。请注意，在前几个时间段中，我们可以访问记录的尖峰计数，但不能访问输入的刺激值。为简单起见，我们假设数据集中第一个时间点之前的时间滞后的 stim 值为 0。这称为“零填充”，以便设计矩阵具有与尖峰中的响应矢量相同的行数。  
您的任务是完成以下功能： 
- 制作刺激的零填充版本 
- 使用刺激的零填充版本初始化一个具有正确形状的空设计矩阵
- 填充设计矩阵的每一行
zero-padding: np.zeros(d - 1) 生成了一个长度为 d-1 的零数组，然后这个数组和 stim 被连接在一起，形成了一个新的一维数组 padded_stim。  
对于每个时间点 i，X[i, j] 对应的是从当前时间点 i 开始，向前 j 个时间点的刺激强度。例如，X[i, 0] 就是在时间点 i 及其前 d-1 个时间点的刺激强度，X[i, d-1] 是在时间点 i 的刺激强度。  
## section 1.2 Fit Linear-Gaussian regression model、
为了模型能够学习到数据的偏置项，我们经常会在设计矩阵（X）中增加一个常数列，通常是全1列。在这个具体的上下文中，你的目标是找到最大似然估计值θ，使得模型y = Xθ尽可能地拟合数据。在这个公式中，X是设计矩阵，y是观测值，θ是模型参数。这是一个线性模型，但如果没有截距项（或者说偏置项b），那么这个模型将被限制在原点通过
plot_spike_filter(theta_lg, dt_stim)绘制刺激滤波器的估计值，这是线性高斯广义线性模型（linear-Gaussian GLM）中的参数θ。这个滤波器描述了刺激如何影响神经元的反应
在神经系统中，我们经常发现近期的输入对输出有更大的影响，而过去的输入影响力则逐渐衰减。这就是为什么我们经常看到模型的权重随着时间滞后的增加而减小
### Coding Exercise 1.2: Predict spike counts with Linear-Gaussian model
- Create the complete design matrix
- Obtain the MLE weights ( θ^ )
- Compute  y^=Xθ^

 "spike-triggered average"（STA）和线性高斯广义线性模型（Linear Gaussian Generalized Linear Model, LG GLM）是两种估计神经元反应的方法之间的关系：  
STA是一种较为简单的方法，它计算的是在观察到脉冲（或"spike"）时，前一段时间内的平均刺激。数学上，这可以表示为 STA = X.T @ y / sum(y)，其中 X 是设计矩阵，y 是神经元的脉冲计数向量。  然而，STA的一个缺点是，它假设设计矩阵 X 的各个列之间（即不同时间滞后的刺激）是互相独立的，即它们之间没有相关性。这在实际情况中可能不成立，特别是当刺激之间存在一定的时间相关性时。  相比之下，LG GLM通过引入一项 (X.T @ X)−1 来纠正这种可能的相关性。这样，即使在刺激之间存在相关性的情况下，LG GLM也能得到更为准确的估计。然而，在本实验中，所使用的刺激是"白噪声"，即各个时间点的刺激是互相独立的。因此，不存在刺激之间的相关性，STA和LG GLM的结果应该是一致的。关于如何检查刺激之间没有相关性，一种常见的方法是计算设计矩阵 X 各列之间的相关系数（或协方差），并检查其是否接近0。在numpy中，可以使用 numpy.corrcoef 或 numpy.cov 函数来计算相关系数或协方差。如果各列之间的相关性接近于0，那么就可以认为刺激之间不存在相关性。
